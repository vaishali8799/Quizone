{"version":3,"sources":["assets/audio/button.mp3","assets/audio/eventually.mp3","assets/audio/wrong.mp3","components/Home.js","utils/is-empty.js","components/quiz/Play.js","components/quiz/quizSummary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","Helmet","id","style","textAlign","className","to","is_empty","value","undefined","Object","keys","length","trim","Play","props","display_question","questions","state","currentQuestion","nextQuestion","previousQuestion","currentQuestionIndex","answer","setState","numberofQuestions","previousRandomnumbers","showOptions","handleDisableButton","handleOptionClick","e","target","innerHTML","toLowerCase","setTimeout","correctSound","current","play","correctAnswer","wrongSound","wrongAnswer","handlenextButtonClick","playbutton","prevState","handlepreviousButtonClick","handleQuitButton","window","confirm","history","push","handleButtonClick","buttonSound","M","toast","html","classes","displayLength","score","correctAnswers","numberofAnsweredQuestions","endGame","navigator","vibrate","wrongAnswers","Array","from","document","querySelectorAll","forEach","option","visibility","handlehints","hints","indexofAnswer","options","index","randomnumber","Math","round","random","includes","concat","setTimer","countdown","Date","now","interval","setInterval","distance","minutes","floor","seconds","clearInterval","time","previousButtonDisable","nextButtonDisable","alert","playerStats","usedfiftyFifty","fifityFifty","hintsUsed","console","log","React","createRef","this","ref","src","correctNotification","wrongNotification","buttonNotification","onClick","question","optionA","optionB","optionC","optionD","classnames","Component","quizSummary","location","stats","toFixed","App","basename","path","exact","component","Boolean","hostname","match","ReactDOM","render","StrictMode","getElementById","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6c89fba8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/button.385b7230.mp3\";","module.exports = __webpack_public_path__ + \"static/media/eventually.b5e7acad.mp3\";","module.exports = __webpack_public_path__ + \"static/media/wrong.a431eaad.mp3\";","import React, { Fragment } from 'react'\r\nimport {Helmet} from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n\r\n\r\n \r\nconst Home =()=>(\r\n    <Fragment>\r\n    <Helmet><title>Quiz App- Home</title></Helmet>\r\n    <div id=\"home\">\r\n        <section>\r\n            <div style={{textAlign:'center'}}>\r\n                <span className=\"mdi mdi-lightbulb-on  bulb mdi-60px\"> </span>\r\n                \r\n            </div>\r\n            <h1>Quizone</h1>\r\n            <div className=\"play-button-container\" >\r\n                <ul>\r\n                    <li ><Link className=\"play-button\" to=\"/play/quiz\">Play</Link></li>\r\n                </ul>\r\n            </div>\r\n            <div className=\"auth-button-container\">\r\n                \r\n                    <Link to=\"/login\" className=\"auth-buttons\" id=\"login\"><span className=\"mdi mdi-account icon\"></span>Login</Link>\r\n                    <Link to=\"/register\" className=\"auth-buttons\" id=\"register\"><span className=\"mdi mdi-pencil icon\"></span>Sign Up</Link>\r\n                    \r\n                \r\n            </div>\r\n            \r\n            \r\n        </section>\r\n        \r\n    </div>\r\n    </Fragment>\r\n);\r\nexport default Home;","const is_empty= (value)=>\r\nvalue===undefined ||\r\nvalue===null||\r\n(typeof value==='object'&& Object.keys(value).length===0)||\r\n(typeof value==='string'&& value.trim().length===0)\r\nexport default is_empty","import React, { Component,Fragment } from 'react'\r\nimport {Helmet} from 'react-helmet'\r\nimport questions from '../../questions'\r\nimport is_empty from '../../utils/is-empty'\r\nimport M from 'materialize-css'\r\nimport buttonNotification from '../../assets/audio/button.mp3'\r\nimport correctNotification from '../../assets/audio/eventually.mp3'\r\nimport wrongNotification from '../../assets/audio/wrong.mp3'\r\nimport classnames from 'classnames';\r\n\r\n\r\n class Play extends Component {\r\n     constructor(props) {\r\n         super(props)\r\n     \r\n         this.state = {\r\n             questions,\r\n             currentQuestion:{},\r\n             nextQuestion:{},\r\n             previousQuestion:{},\r\n             answer:'',\r\n             numberofQuestions:0,\r\n             numberofAnsweredQuestions:0,\r\n             currentQuestionIndex:0,\r\n             score:0,\r\n             correctAnswers:0,\r\n             wrongAnswers:0,\r\n             hints:5,\r\n             hintsUsed:0,\r\n            previousRandomnumbers:[],\r\n            nextButtonDisable:false,\r\n             previousButtonDisable:true,\r\n             time:{}\r\n\r\n              \r\n         }\r\n         this.interval=null\r\n         this.correctSound=React.createRef();\r\n         this.wrongSound=React.createRef();\r\n         this.buttonSound=React.createRef();\r\n     }\r\n     componentDidMount(){\r\n         const {questions,currentQuestion,previousQuestion,nextQuestion}=this.state\r\n         this.display_question( questions,currentQuestion,nextQuestion,previousQuestion )\r\n         this.setTimer()\r\n     }\r\n     componentWillUnmount(){\r\n         clearInterval(this.interval);\r\n     }\r\n     display_question=(questions=this.state.questions,currentQuestion,nextQuestion,previousQuestion)=>{\r\n         let {currentQuestionIndex}=this.state;\r\n         if(!is_empty(this.state.questions)){\r\n             questions=this.state.questions;\r\n             currentQuestion=questions[currentQuestionIndex]\r\n             nextQuestion=questions[currentQuestionIndex+1]\r\n             previousQuestion=questions[currentQuestionIndex-1]\r\n             const answer= currentQuestion.answer;\r\n             this.setState({\r\n                 currentQuestion,previousQuestion,nextQuestion,answer,numberofQuestions:questions.length,previousRandomnumbers:[]\r\n             },()=>{\r\n                 this.showOptions();\r\n                 this.handleDisableButton();\r\n             })\r\n         }\r\n\r\n     }\r\n     handleOptionClick=(e) =>{ \r\n        if(e.target.innerHTML.toLowerCase()===this.state.answer.toLowerCase())\r\n        {   setTimeout(()=>{this.correctSound.current.play();},500)\r\n            \r\n            this.correctAnswer();\r\n        }\r\n        else{\r\n            setTimeout(()=>{this.wrongSound.current.play();},500)\r\n            \r\n            this.wrongAnswer();\r\n        }\r\n\r\n\r\n         \r\n     }\r\n     handlenextButtonClick=()=>{\r\n         this.playbutton()\r\n         if(this.state.nextQuestion!==undefined){\r\n             this.setState(prevState=>({\r\n                 currentQuestionIndex:prevState.currentQuestionIndex+1\r\n             }),()=>{\r\n                 this.display_question(this.state.state,this.state.currentQuestion,this.state.nextQuestion,this.state.previousQuestion)\r\n             })\r\n\r\n         }\r\n\r\n     }\r\n     handlepreviousButtonClick=()=>{\r\n        this.playbutton()\r\n        if(this.state.nextQuestion!==undefined){\r\n            this.setState(prevState=>({\r\n                currentQuestionIndex:prevState.currentQuestionIndex-1\r\n            }),()=>{\r\n                this.display_question(this.state.state,this.state.currentQuestion,this.state.nextQuestion,this.state.previousQuestion)\r\n            })\r\n\r\n        }\r\n\r\n    }\r\n    handleQuitButton=()=>{\r\n         this.playbutton();\r\n         if(window.confirm('Are you sure you want to quit?')){\r\n             this.props.history.push('/');\r\n         }\r\n    }\r\n     handleButtonClick=(e)=>{\r\n         switch(e.target.id){\r\n             case 'button-next':\r\n                 this.handlenextButtonClick();\r\n                 break;\r\n             case 'button-previous':\r\n                 this.handlepreviousButtonClick();\r\n                 break;\r\n             case 'button-quit':\r\n                 this.handleQuitButton();\r\n                 break;\r\n             default:\r\n                 break;\r\n         }\r\n     }\r\n     playbutton=()=>{\r\n         this.buttonSound.current.play()\r\n     }\r\n     correctAnswer=()=>{\r\n        M.toast({\r\n            html:'Correct Answer!',\r\n            classes:'toast-valid',\r\n            displayLength:1500\r\n\r\n        });\r\n        this.setState(prevState=>({\r\n            score: prevState.score+1,\r\n            correctAnswers: prevState.correctAnswers+1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex+1,\r\n            numberofAnsweredQuestions: prevState.numberofAnsweredQuestions+1\r\n        }),()=>{\r\n            if(this.state.nextQuestion===undefined){\r\n                this.endGame();\r\n\r\n            }\r\n            else{\r\n                this.display_question(\r\n                    this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.previousQuestion\r\n                )\r\n\r\n            }\r\n            \r\n            });\r\n\r\n     }\r\n     wrongAnswer=()=>{\r\n         navigator.vibrate(5000)\r\n        M.toast({\r\n            html:'Wrong Answer!',\r\n            classes:'toast-invalid',\r\n            displayLength:1500\r\n\r\n        });\r\n        this.setState(prevState=>({\r\n            \r\n            wrongAnswers: prevState.wrongAnswers+1,\r\n            currentQuestionIndex: prevState.currentQuestionIndex+1,\r\n            numberofAnsweredQuestions: prevState.numberofAnsweredQuestions+1\r\n        }),()=>{\r\n            if(this.state.nextQuestion===undefined){\r\n                this.endGame();\r\n\r\n            }\r\n            else{\r\n                this.display_question(\r\n                    this.state.questions,this.state.currentQuestion,this.state.nextQuestion,this.previousQuestion\r\n                )\r\n\r\n            }\r\n            });\r\n\r\n     }\r\n     showOptions=()=>{\r\n        const options=Array.from(document.querySelectorAll('.option'))\r\n        options.forEach(option=>{\r\n            option.style.visibility='visible';\r\n        });\r\n\r\n     }\r\n     handlehints=()=>{\r\n         if(this.state.hints>0){\r\n            const options=Array.from(document.querySelectorAll('.option'))\r\n            let indexofAnswer;\r\n            options.forEach((option,index)=>{\r\n                if(option.innerHTML.toLowerCase()===this.state.answer.toLowerCase())\r\n                {\r\n                    indexofAnswer=index;\r\n                }\r\n   \r\n            });\r\n            while(true){\r\n                let randomnumber=Math.round(Math.random()*3);\r\n                if(randomnumber!==indexofAnswer && !this.state.previousRandomnumbers.includes(randomnumber)){\r\n                    options.forEach((option,index)=>{\r\n                        if(index===randomnumber){\r\n                            option.style.visibility='hidden';\r\n                            this.setState((prevState=>({\r\n                                hints:prevState.hints-1,\r\n                                previousRandomnumbers:prevState.previousRandomnumbers.concat(randomnumber)\r\n                            })))\r\n                        }\r\n   \r\n                    });\r\n                    break;\r\n                }\r\n                if (this.state.previousRandomnumbers.length>=3)\r\n                break;\r\n            }\r\n\r\n         }\r\n         \r\n\r\n     }\r\n    \r\n     setTimer=()=>{\r\n         const countdown =Date.now()+120000;\r\n         this.interval=setInterval(() => {\r\n             const now =new Date();\r\n             const distance =countdown-now;\r\n             const minutes = Math.floor((distance%(1000*60*60))/(1000*60));\r\n             const seconds = Math.floor((distance%(1000*60))/(1000))\r\n             if(distance<0){\r\n                 clearInterval(this.interval);\r\n                 this.setState({\r\n                     time:{\r\n                         minutes:0,\r\n                         seconds:0\r\n                     }\r\n                 },()=>{\r\n                     this.endGame();\r\n                 })\r\n             }else{\r\n                 this.setState({time:{\r\n                     minutes,seconds\r\n                 }\r\n                })\r\n             }\r\n             \r\n         }, 1000);\r\n\r\n     }\r\n    handleDisableButton=()=>{\r\n        if(this.state.previousQuestion===undefined||this.state.currentQuestionIndex===0){\r\n            this.setState({\r\n                previousButtonDisable:true\r\n            });\r\n        }else{\r\n            this.setState({\r\n                previousButtonDisable:false\r\n            })\r\n        }\r\n        if(this.state.nextQuestion===undefined||this.state.currentQuestionIndex+1===this.state.numberofQuestions){\r\n            this.setState({\r\n                nextButtonDisable:true\r\n            });\r\n        }else{\r\n            this.setState({\r\n                nextButtonDisable:false\r\n            })\r\n        }\r\n    }\r\n    endGame=()=>{\r\n        alert('Qiz has ended!')\r\n        const {state}=this\r\n        const playerStats ={\r\n            score:state.score,\r\n            numberofQuestions:state.numberofQuestions,\r\n            numberofAnsweredQuestions:state.correctAnswers+state.wrongAnswers,\r\n            correctAnswers:state.correctAnswers,\r\n            wrongAnswers:state.wrongAnswers,\r\n            usedfiftyFifty:2-state.fifityFifty,\r\n            hintsUsed:5-state.hints\r\n        };\r\n        console.log(playerStats)\r\n        setTimeout(()=>{\r\n            this.props.history.push('/play/quizSummary',playerStats)\r\n        },1000)\r\n        \r\n    }\r\n    render() {\r\n        const {currentQuestion,\r\n            currentQuestionIndex,\r\n            numberofQuestions,\r\n            hints,\r\n            time}=this.state;\r\n        \r\n        return (\r\n            \r\n            <Fragment>\r\n                <Helmet><title>PLay Quiz</title></Helmet>\r\n                <Fragment>\r\n                    <audio ref={this.correctSound}src={correctNotification}></audio>\r\n                    <audio ref={this.wrongSound} src={wrongNotification}></audio>\r\n                    <audio ref={this.buttonSound}src={buttonNotification}></audio>\r\n                </Fragment>\r\n            <div className=\"questions\">\r\n                <div className=\"lifeline\">\r\n                    \r\n        <p><span   onClick={this.handlehints} className=\"mdi mdi-lightbulb-outline lifeline-icon mdi-24px\"></span><span className=\"life\">{hints}</span> </p>\r\n                </div>\r\n                <div className=\"timer-container\">\r\n                    <p>\r\n        <span className=\"left\">{currentQuestionIndex+1} of {numberofQuestions}</span>\r\n                     <span className=\"right\"> {time.minutes}:{time.seconds} <span className=\"mdi mdi-clock-outline mdi-24px\"></span></span>\r\n                    </p>\r\n                </div>\r\n                <h5>{currentQuestion.question}</h5>\r\n                <div className=\"options\">\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionA}</p>\r\n                    <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionB}</p>\r\n                    \r\n                </div>\r\n                <div className=\"options\">\r\n                <p onClick={this.handleOptionClick}className=\"option\">{currentQuestion.optionC}</p>\r\n                <p onClick={this.handleOptionClick} className=\"option\">{currentQuestion.optionD }</p>\r\n                </div>\r\n                <div className=\"buttons\">\r\n                    <button className={classnames('',{'disable':this.state.previousButtonDisable})}\r\n                    id=\"button-previous\" onClick={this.handleButtonClick}>\r\n                         <span className=\" mdi mdi-chevron-double-left \">\r\n                             </span>Previous\r\n                    </button>\r\n                    <button className={classnames('',{'disable':this.state.nextButtonDisable})}\r\n                     onClick={this.handleButtonClick} id=\"button-next\">Next\r\n                     <span className=\"mdi mdi-chevron-double-right \"></span></button>\r\n                    <button\r\n                     id=\"button-quit\" onClick={this.handleButtonClick}>Quit\r\n                      <span className=\"mdi mdi-close \"></span>\r\n                      </button>\r\n\r\n\r\n\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n\r\n\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Play\r\n","import React, { Component, Fragment } from 'react'\r\nimport {Helmet} from 'react-helmet'\r\nimport { Link } from 'react-router-dom'\r\n class quizSummary extends Component {\r\n     constructor(props) {\r\n         super(props)\r\n     \r\n         this.state = {\r\n              score:0,\r\n              numberofQuestions:0,\r\n              numberofAnsweredQuestions:0,\r\n              correctAnswers:0,\r\n              wrongAnswers:0,\r\n              hintsUsed:0,\r\n        \r\n         }\r\n     }\r\n     componentDidMount(){\r\n        const {state}=this.props.location;\r\n        if(state){\r\n         this.setState({\r\n            \r\n            score:(state.score/state.numberofQuestions)*100,\r\n            numberofQuestions:state.numberofQuestions,\r\n            numberofAnsweredQuestions:state.numberofAnsweredQuestions,\r\n            correctAnswers:state.correctAnswers,\r\n            wrongAnswers:state.wrongAnswers,\r\n            hintsUsed:state.hintsUsed,\r\n\r\n         })}\r\n     }\r\n    render() {\r\n        const {state}=this.props.location;\r\n        let stats;\r\n        \r\n        if(state!==undefined){\r\n            stats=(\r\n                <Fragment>\r\n                <div className=\"box\">\r\n                    <span className=\"mdi mdi-check-circle-outline success-icon\"></span>\r\n                    <h2>Congratulations you made it!!</h2>\r\n                </div>\r\n                \r\n                <div className=\"container\">\r\n                   \r\n                   <h2>Your score: {this.state.score.toFixed(0)}&#37;</h2>\r\n                   <span className=\"stat-left\">Total number of question  :</span>\r\n                   <span className=\"right\">{this.state.numberofQuestions}</span>\r\n                   <br/>\r\n                   \r\n                   <span className=\"stat-left\">Total number of answered question  :</span>\r\n                   <span className=\"right\">{this.state.numberofAnsweredQuestions}</span><br/>\r\n\r\n                   <span className=\"stat-left\">Total number of correct answers  :</span>\r\n                   <span className=\"right\">{this.state.correctAnswers}</span><br/>\r\n\r\n                   <span className=\"stat-left\">Total number of wrong answers  :</span>\r\n                   <span className=\"right\">{this.state.wrongAnswers}</span><br/>\r\n\r\n                   <span className=\"stat-left\">Hints Used  :</span>\r\n                   <span className=\"right\">{this.state.hintsUsed}</span><br/>\r\n\r\n                   \r\n                </div>\r\n                <div className=\"link-container\">\r\n                    \r\n                        \r\n                            <Link  className=\"link-button\"to=\"/\">Back to Home</Link>\r\n                        \r\n                        \r\n                            <Link className=\"link-button\"  to=\"/play/quiz\">Play again</Link>\r\n                        \r\n                    \r\n                </div>\r\n                </Fragment>\r\n            )\r\n        }\r\n        else{\r\n            stats=(\r\n                <section>\r\n                <h1 className=\"no-stats\">No statistics available</h1>\r\n                \r\n                <ul>\r\n                <li >\r\n                    <Link  className=\"link-button\"to=\"/\">Back to Home</Link>\r\n                </li>\r\n                <li >\r\n                    <Link  className=\"link-button\"to=\"/play/quiz\">Take a quiz</Link>\r\n                </li>\r\n            </ul>\r\n            </section>\r\n            )\r\n        }\r\n        return (\r\n            <Fragment>\r\n                <Helmet><title>Quiz-App Summary</title></Helmet>\r\n                {stats}\r\n            </Fragment>\r\n        )\r\n    }\r\n}\r\n\r\nexport default quizSummary;\r\n","import React from 'react';\n\nimport{HashRouter as Router,Route} from 'react-router-dom'\nimport Home from './components/Home'\nimport Play  from './components/quiz/Play'\nimport quizSummary from './components/quiz/quizSummary'\n\n\nimport './App.css';\n\nfunction App() {\n\n  return (\n    \n    <Router basename=\"/\">\n      \n      \n      <Route path=\"/\" exact component={Home}/>\n      <Route path=\"/play/quiz\" exact component={Play}/>\n      <Route path=\"/play/quizSummary\" exact component={quizSummary}/>\n      \n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n    window.location.hostname === 'localhost' ||\r\n      // [::1] is the IPv6 localhost address.\r\n      window.location.hostname === '[::1]' ||\r\n      // 127.0.0.0/8 are considered localhost for IPv4.\r\n      window.location.hostname.match(\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n      )\r\n  );\r\n  \r\n  export function register(config) {\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n      // The URL constructor is available in all browsers that support SW.\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n      if (publicUrl.origin !== window.location.origin) {\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\r\n        // from what our page is served on. This might happen if a CDN is used to\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n        return;\r\n      }\r\n  \r\n      window.addEventListener('load', () => {\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n  \r\n        if (isLocalhost) {\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\r\n          checkValidServiceWorker(swUrl, config);\r\n  \r\n          // Add some additional logging to localhost, pointing developers to the\r\n          // service worker/PWA documentation.\r\n          navigator.serviceWorker.ready.then(() => {\r\n            console.log(\r\n              'This web app is being served cache-first by a service ' +\r\n                'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n            );\r\n          });\r\n        } else {\r\n          // Is not localhost. Just register service worker\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      });\r\n    }\r\n  }\r\n  \r\n  function registerValidSW(swUrl, config) {\r\n    navigator.serviceWorker\r\n      .register(swUrl)\r\n      .then(registration => {\r\n        registration.onupdatefound = () => {\r\n          const installingWorker = registration.installing;\r\n          if (installingWorker == null) {\r\n            return;\r\n          }\r\n          installingWorker.onstatechange = () => {\r\n            if (installingWorker.state === 'installed') {\r\n              if (navigator.serviceWorker.controller) {\r\n                // At this point, the updated precached content has been fetched,\r\n                // but the previous service worker will still serve the older\r\n                // content until all client tabs are closed.\r\n                console.log(\r\n                  'New content is available and will be used when all ' +\r\n                    'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n                );\r\n  \r\n                // Execute callback\r\n                if (config && config.onUpdate) {\r\n                  config.onUpdate(registration);\r\n                }\r\n              } else {\r\n                // At this point, everything has been precached.\r\n                // It's the perfect time to display a\r\n                // \"Content is cached for offline use.\" message.\r\n                console.log('Content is cached for offline use.');\r\n  \r\n                // Execute callback\r\n                if (config && config.onSuccess) {\r\n                  config.onSuccess(registration);\r\n                }\r\n              }\r\n            }\r\n          };\r\n        };\r\n      })\r\n      .catch(error => {\r\n        console.error('Error during service worker registration:', error);\r\n      });\r\n  }\r\n  \r\n  function checkValidServiceWorker(swUrl, config) {\r\n    // Check if the service worker can be found. If it can't reload the page.\r\n    fetch(swUrl, {\r\n      headers: { 'Service-Worker': 'script' },\r\n    })\r\n      .then(response => {\r\n        // Ensure service worker exists, and that we really are getting a JS file.\r\n        const contentType = response.headers.get('content-type');\r\n        if (\r\n          response.status === 404 ||\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\r\n        ) {\r\n          // No service worker found. Probably a different app. Reload the page.\r\n          navigator.serviceWorker.ready.then(registration => {\r\n            registration.unregister().then(() => {\r\n              window.location.reload();\r\n            });\r\n          });\r\n        } else {\r\n          // Service worker found. Proceed as normal.\r\n          registerValidSW(swUrl, config);\r\n        }\r\n      })\r\n      .catch(() => {\r\n        console.log(\r\n          'No internet connection found. App is running in offline mode.'\r\n        );\r\n      });\r\n  }\r\n  \r\n  export function unregister() {\r\n    if ('serviceWorker' in navigator) {\r\n      navigator.serviceWorker.ready\r\n        .then(registration => {\r\n          registration.unregister();\r\n        })\r\n        .catch(error => {\r\n          console.error(error.message);\r\n        });\r\n    }\r\n  }\r\n  ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/style.scss'\nimport App from './App';\nimport '../node_modules/@mdi/font/css/materialdesignicons.min.css';\nimport '../node_modules/materialize-css/dist/css/materialize.min.css';\nimport '../node_modules/materialize-css/dist/js/materialize.min.js';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}